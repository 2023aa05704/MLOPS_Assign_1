name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.x
  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #     - name: Run flake8
  #       run: |
  #         pip install flake8
  #         flake8 src/train.py

  # test:
  #   runs-on: ubuntu-latest
  #   needs: lint  # This ensures 'test' runs after 'lint'
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.x
  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #     - name: Run tests
  #       run: |
  #         pytest tests/

  deploy:
    runs-on: ubuntu-latest
    # needs: test  # This ensures 'deploy' runs after 'test'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Set up virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Replace with the region you are using
      - name: Clone repository
        run: |
          git clone https://github.com/2023aa05704/MLOPS_Assign_1.git
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Create ECR repository (if it doesn't exist)
        run: |
          aws ecr describe-repositories --repository-names mlops_assign_1 || \
          aws ecr create-repository --repository-name mlops_assign_1
      - name: Build Docker image
        run: |
          docker build -t mlops_assign_1 .
      - name: Tag Docker image
        run: |
          docker tag mlops_assign_1:latest 692859932238.dkr.ecr.ap-south-1.amazonaws.com/mlops_assign_1:latest
      - name: Push Docker image to ECR
        run: |
          docker push 692859932238.dkr.ecr.ap-south-1.amazonaws.com/mlops_assign_1:latest

      # Create Lambda Execution Role (if it does not exist)
      - name: Check if Lambda execution role exists
        run: |
          ROLE_EXISTS=$(aws iam get-role --role-name lambda-execution-role 2>&1 || echo "Role not found")

          if [[ "$ROLE_EXISTS" == *"Role not found"* ]]; then
            echo "Role does not exist. Creating role..."

            # Create the trust policy for the role
            TRUST_POLICY='{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'

            # Create the IAM role
            aws iam create-role --role-name lambda-execution-role \
              --assume-role-policy-document "$TRUST_POLICY"

            # Attach the AWSLambdaBasicExecutionRole policy
            aws iam attach-role-policy --role-name lambda-execution-role \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

            # Optionally, attach AmazonEC2ContainerRegistryReadOnly policy (if accessing ECR)
            aws iam attach-role-policy --role-name lambda-execution-role \
              --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

            echo "Lambda execution role created successfully."
          else
            echo "Role already exists. Skipping creation."
          fi

      - name: Create Lambda function (if it does not exist)
        run: |
          # Try to get the Lambda function
          FUNCTION_EXISTS=$(aws lambda get-function --function-name mlops_assign_1 2>&1 || echo "Function not found")

          # If the function does not exist, create it
          if [[ "$FUNCTION_EXISTS" == *"Function not found"* ]]; then
            echo "Lambda function does not exist. Creating function..."

            aws lambda create-function \
              --function-name mlops_assign_1 \
              --package-type Image \
              --role arn:aws:iam::692859932238:role/lambda-execution-role \
              --code ImageUri=692859932238.dkr.ecr.ap-south-1.amazonaws.com/mlops_assign_1:latest \
              --timeout 900 \
              --memory-size 1024 \
              --region ap-south-1
            echo "Lambda function created successfully."
          else
            echo "Lambda function exists. Updating function..."

            # If the function exists, update the function code
            aws lambda update-function-code \
              --function-name mlops_assign_1 \
              --image-uri 692859932238.dkr.ecr.ap-south-1.amazonaws.com/mlops_assign_1:latest
            echo "Lambda function updated successfully."
          fi

      - name: Create S3 bucket if it doesn't exist
        run: |
          BUCKET_NAME="zappa-mlops-assign-1"
          if ! aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket exists: $BUCKET_NAME"
          else
            echo "Bucket does not exist. Creating bucket..."
            aws s3 mb s3://$BUCKET_NAME --region ap-south-1
          fi

      # Set AWS_PROFILE environment variable to bypass the need for a profile
      - name: Set AWS Profile
        run: echo "AWS_PROFILE=default" >> $GITHUB_ENV

      - name: Configure Zappa settings
        run: |
          # Make sure the zappa_settings.json exists and is correctly configured
          echo '{
            "production": {
              "app_function": "src.app.lambda_handler",
              "aws_region": "ap-south-1",
              "profile_name": "default",
              "project_name": "mlops-assign-1",
              "runtime": "python3.11",
              "s3_bucket": "zappa-mlops-assign-1"
            }
          }' > zappa_settings.json
      - name: Configure AWS CLI with secrets
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ap-south-1  # Update with your region

      - name: Deploy using Zappa
        run: |
          source venv/bin/activate
          zappa deploy production


      - name: Create Lambda Function URL
        run: |
          # Create Lambda function URL configuration
          FUNCTION_URL=$(aws lambda create-function-url-config \
            --function-name mlops_assign_1 \
            --auth-type NONE \
            --region ap-south-1 \
            --query 'FunctionUrl' \
            --output text)

          echo "Lambda Function URL: $FUNCTION_URL"

          # Save the function URL for later use
          echo "LAMBDA_FUNCTION_URL=$FUNCTION_URL" >> $GITHUB_ENV

      - name: Test Lambda function using curl
        run: |
          # Test the Lambda function using curl
          curl -X POST ${{ env.LAMBDA_FUNCTION_URL }} \
            -H "Content-Type: application/json" \
            -d '{"area": 2000, "bedrooms": 3, "bathrooms": 2, "stories": 2, "parking": 1}'